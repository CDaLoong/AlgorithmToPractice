// 放在开始
// 1. 严谨性判断，不允许任何报错
// 2. 任何递归程序，先写出口
// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景

// 给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。
// 请你将两个数相加，并以相同形式返回一个表示和的链表。
// 你可以假设除了数字 0 之外，这两个数都不会以 0 开头。
// 示例 1：
// 输入：l1 = [2,4,3], l2 = [5,6,4]
// 输出：[7,0,8]
// 解释：342 + 465 = 807.

// 示例 2：
// 输入：l1 = [0], l2 = [0]
// 输出：[0]

// 示例 3：
// 输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
// 输出：[8,9,9,9,0,0,0,1]


// const l1 = [2, 4, 3], l2 = [5, 6, 4]
const l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]

const func = (l1, l2) => {
    if (!Array.isArray(l1) || !Array.isArray(l2) || l1.length <= 0 || l2.length <= 0) return
    return (+l1.reverse().join('') + +l2.reverse().join('')).toString().split('').map(i => Number(i)).reverse()
}
console.log(func(l1, l2))